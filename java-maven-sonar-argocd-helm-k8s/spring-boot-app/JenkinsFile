/*

pipeline {
  agent any

  environment {
    SONAR_URL = "http://54.84.83.109:9000"
    GIT_REPO_NAME = "CICD_Capestone_Project_2"
    GIT_USER_NAME = "lalitpatil56"
    DOCKER_IMAGE = "lalit0506/springboot-app:${BUILD_NUMBER}"
  }

  stages {
    stage('CI Pipeline') {
      steps {
        script {
          // Mark workspace as safe for Git
          sh 'git config --global --add safe.directory /var/lib/jenkins/workspace/CICD_Pipeline'

          // === Build and Test ===
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn clean package
          '''

          // === Static Code Analysis ===
          withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
            sh '''
              cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
              mvn org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar \
                -Dsonar.login=$SONAR_AUTH_TOKEN \
                -Dsonar.host.url=$SONAR_URL
            '''
          }

          // === Build and Push Docker Image ===
          withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
            sh '''
              cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
              docker build -t $DOCKER_IMAGE .
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
              docker push $DOCKER_IMAGE
              docker logout
            '''
          }
        }
      }
    }
  }
}
*/

pipeline {
  agent {
    docker {
      image 'lalit0506/maven-docker-agent:v1'
      args '-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=tail lalit0506/maven-docker-agent:v1 -- tail -f /dev/null'
      //args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }

  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/lalitpatil56/CICD_Capestone_Project_2.git'
      }
    }
    /*
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.84.83.109:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "lalit0506/ultimate-cicd-pipeline:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "CICD_Capestone_Project_2"
            GIT_USER_NAME = "lalitpatil56"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "lalit.patil5694@gmail.com"
                    git config user.name "Lalit Patil"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
    */
  }
}

